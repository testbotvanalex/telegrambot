from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import StateFilter

from db.db import get_all_clients, create_client, get_client_by_id, save_client_note # –ò–°–ü–†–ê–í–õ–ï–ù–û: from db.db
from utils.role_checker import is_admin

router = Router()

class NewClient(StatesGroup):
    name = State()
    phone = State()
    business = State()

class ClientNote(StatesGroup):
    adding_note = State()

# –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è AdminStates, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–¥—É–º–∞–Ω
# –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —Ç–æ –ª—É—á—à–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏–º—è.
# –Ø —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏.
class ClientManagementStates(StatesGroup):
    waiting_for_client_name = State() # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    waiting_for_client_phone = State()
    waiting_for_client_business = State()


@router.message(Command("clients"))
async def list_clients(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.")
        return

    clients = await get_all_clients()
    if not clients:
        await message.answer("üì≠ Aucun client enregistr√©.")
        return

    for client in clients:
        await message.answer(
            f"üßë‚Äçüíº <b>{client['name']}</b>\nüìû {client['phone'] or 'N/A'}\nüè¢ {client['business'] or 'N/A'}\nüóí Notes: {client['notes'] or 'Aucune'}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóí Voir ou ajouter une note", callback_data=f"client:note:{client['id']}")]
            ]),
            parse_mode="HTML"
        )

@router.message(Command("newclient"))
async def new_client(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.")
        return
    await message.answer("üßë‚Äçüíº Entrez le nom du client :")
    await state.set_state(NewClient.name)

@router.message(NewClient.name)
async def client_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû Entrez le num√©ro de t√©l√©phone :")
    await state.set_state(NewClient.phone)

@router.message(NewClient.phone)
async def client_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üè¢ Entrez le nom du business :")
    await state.set_state(NewClient.business)

@router.message(NewClient.business)
async def client_business(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await create_client(data["name"], data["phone"], message.text)
    await message.answer("‚úÖ Client enregistr√©.")
    await state.clear()

@router.callback_query(F.data.startswith("client:note:"))
async def handle_client_note(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.")
        return
    
    client_id = int(callback.data.split(":")[2])
    client = await get_client_by_id(client_id)

    if not client:
        await callback.answer("‚ùå Client introuvable.", show_alert=True)
        return

    await state.update_data(client_id=client_id)
    await callback.message.edit_text(
        f"üóí Note pour <b>{client['name']}</b> :\n"
        f"Note actuelle: {client['notes'] or 'Aucune'}\n\n"
        "Envoyez-moi une nouvelle note √† ajouter/–æ–±–Ω–æ–≤–∏—Ç—å.",
        parse_mode="HTML"
    )
    await state.set_state(ClientNote.adding_note)

@router.message(ClientNote.adding_note, F.text)
async def save_note(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.")
        await state.clear()
        return

    data = await state.get_data()
    client_id = data.get("client_id")
    note_text = message.text.strip()

    if client_id:
        await save_client_note(client_id, note_text)
        await message.answer("‚úÖ Note ajout√©e/mise √† jour.")
        await state.clear()
        await list_clients(message)
    else:
        await message.answer("‚ùå Erreur: ID client non d√©fini.")
        await state.clear()

# –ï—Å–ª–∏ AdminStates.waiting_for_client_name –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏,
# –∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ NewClient.name
# –Ø –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª, —á—Ç–æ NewClient —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
# –ï—Å–ª–∏ –∂–µ —ç—Ç–æ –±—ã–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è FSM –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, —Ç–æ AdminStates
# –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
# –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –≤ —Ç—Ä–µ–π—Å–±—ç–∫–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 168, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
# –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π FSM, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–µ –≤–∏–¥–µ–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∞–π–ª–∞—Ö.
# –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ 168 –±—ã–ª–∞ @router.message(AdminStates.waiting_for_client_name),
# —Ç–æ —è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å @router.message(NewClient.name)
# –∏–ª–∏ AdminStates –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ.
# –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é NewClient, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
# class AdminStates(StatesGroup):
#     waiting_for_client_name = State()
#     ...
# –ù–æ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ, –µ—Å–ª–∏ NewClient —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç—É —Ä–æ–ª—å.

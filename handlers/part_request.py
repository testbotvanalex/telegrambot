from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards.skip import skip_vin_kb, skip_photo_kb
from keyboards.menu import get_main_menu
from keyboards.reply import get_cancel_button # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
from keyboards.ai_correct import get_ai_correct_keyboard

from services.ai_correction import correct_part_name # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –∏–∑ services.ai_correction
from db.db import save_part_request, get_store_by_telegram_id
from handlers.request_broadcast import broadcast_request_to_stores # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
import textwrap
import asyncio # –î–ª—è asyncio.sleep

router = Router()

class PartRequest(StatesGroup):
    waiting_for_marque = State()
    waiting_for_modele = State()
    waiting_for_annee = State()
    waiting_for_piece = State()
    waiting_for_quantite = State()
    waiting_for_vin = State()
    waiting_for_photo = State()

@router.message(Command("verzoek"))
@router.message(F.text == "üì¶ Demander une pi√®ce")
async def start_request(message: Message, state: FSMContext):
    print(f"DEBUG_PR: start_request –ø–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {message.from_user.id}")
    store = await get_store_by_telegram_id(message.from_user.id)
    if not store or not store["approved"]:
        await message.answer("‚ùå Votre magasin n'est pas encore approuv√© pour faire des demandes.")
        return
    await message.answer("üöò Marque du v√©hicule :", reply_markup=get_cancel_button())
    await state.set_state(PartRequest.waiting_for_marque)

@router.message(PartRequest.waiting_for_marque, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_modele, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_annee, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_piece, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_quantite, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_vin, F.text == "‚ùå Annuler")
@router.message(PartRequest.waiting_for_photo, F.text == "‚ùå Annuler")
async def cancel_part_request(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå Demande de pi√®ce annul√©e.", reply_markup=ReplyKeyboardRemove())
    # from keyboards.menu import get_main_menu
    # await message.answer("üìã Menu principal:", reply_markup=get_main_menu("store"))


@router.message(PartRequest.waiting_for_marque)
async def get_marque(message: Message, state: FSMContext):
    await state.update_data(marque=message.text)
    await message.answer("üìç Mod√®le du v√©hicule :", reply_markup=get_cancel_button())
    await state.set_state(PartRequest.waiting_for_modele)

@router.message(PartRequest.waiting_for_modele)
async def get_modele(message: Message, state: FSMContext):
    await state.update_data(modele=message.text)
    await message.answer("üìÖ Ann√©e du v√©hicule :", reply_markup=get_cancel_button())
    await state.set_state(PartRequest.waiting_for_annee)

@router.message(PartRequest.waiting_for_annee)
async def get_annee(message: Message, state: FSMContext):
    await state.update_data(annee=message.text)
    await message.answer("üîß Nom ou num√©ro de la pi√®ce :", reply_markup=get_cancel_button())
    await state.set_state(PartRequest.waiting_for_piece)

@router.message(PartRequest.waiting_for_piece)
async def get_piece(message: Message, state: FSMContext):
    raw_piece = message.text
    corrected_piece = await correct_part_name(raw_piece)
    
    unrecognized_phrases = ["aucune pi√®ce automobile connue", "veuillez v√©rifier", "non identifiable", "je ne peux pas corriger"]
    if any(phrase in corrected_piece.lower() for phrase in unrecognized_phrases) or not corrected_piece.strip() or len(corrected_piece.strip()) < 3:
        await message.answer("‚ö†Ô∏è Le nom de pi√®ce n'a pas √©t√© reconnu. Veuillez √™tre plus pr√©cis ou v√©rifier l'orthographe.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        # await state.set_state(PartRequest.waiting_for_piece)
        return

    await state.update_data(nom_piece=corrected_piece, nom_piece_original=raw_piece)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º shorten –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ callback_data
    short_corrected_piece = textwrap.shorten(corrected_piece, width=50, placeholder="...")

    await message.answer(
        f"‚úÖ Nom de pi√®ce corrig√© : <b>{corrected_piece}</b>\nSouhaitez-vous continuer avec ce nom ?",
        reply_markup=get_ai_correct_keyboard(short_corrected_piece),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("piece_ok:"))
async def confirm_piece(callback: CallbackQuery, state: FSMContext):
    # data = await state.get_data()
    # full_piece_name = data.get('nom_piece')
    # await state.update_data(nom_piece=full_piece_name) # –≠—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ state.data
    
    await callback.message.edit_text("üî¢ Quantit√© :", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.set_state(PartRequest.waiting_for_quantite)
    await callback.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏


@router.callback_query(F.data == "piece_retry")
async def retry_piece(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîß Entrez √† nouveau le nom ou le num√©ro de la pi√®ce :")
    await state.set_state(PartRequest.waiting_for_piece)
    await callback.answer()

@router.message(PartRequest.waiting_for_quantite)
async def get_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("La quantit√© doit √™tre un nombre positif.")
        await state.update_data(quantite=quantity)
    except ValueError:
        await message.answer("‚ùå Quantit√© invalide. Veuillez entrer un nombre entier positif :")
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    await message.answer("üîç Entrez le VIN du v√©hicule (optionnel) :", reply_markup=skip_vin_kb)
    await state.set_state(PartRequest.waiting_for_vin)

@router.message(PartRequest.waiting_for_vin)
async def get_vin(message: Message, state: FSMContext):
    if message.text != "‚ûñ Passer":
        await state.update_data(vin=message.text)
    else:
        await state.update_data(vin=None)
    await message.answer("üì∑ Envoyez une photo ou scannez la pi√®ce (optionnel) :", reply_markup=skip_photo_kb)
    await state.set_state(PartRequest.waiting_for_photo)

@router.message(PartRequest.waiting_for_photo)
async def get_photo(message: Message, state: FSMContext):
    photo_file_id = None
    if message.photo:
        photo_file_id = message.photo[-1].file_id
        await state.update_data(photo=photo_file_id)
    else:
        await state.update_data(photo=None) # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç "‚ûñ Passer" –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç

    data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 'nom_piece' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'nom_piece_original'
    if 'nom_piece' not in data:
        data['nom_piece'] = data.get('nom_piece_original', 'Pi√®ce inconnue')

    request_id = await save_part_request(
        message.from_user.id,
        data.get("marque"),
        data.get("modele"),
        data.get("annee"),
        data.get("nom_piece"),
        data.get("quantite"),
        photo_file_id # –ü–µ—Ä–µ–¥–∞–µ–º photo_file_id
    )

    if request_id:
        print(f"DEBUG_PR: –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {request_id}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_data = {
            "id": request_id,
            "store_id": message.from_user.id,
            "car": f"{data.get('marque')} {data.get('modele')} ({data.get('annee')})",
            "part_name": data.get("nom_piece"),
            "quantite": data.get("quantite"),
            "vin_code": data.get("vin"), # –ü–µ—Ä–µ–¥–∞—á–∞ VIN
            "photo_file_id": photo_file_id # –ü–µ—Ä–µ–¥–∞—á–∞ photo_file_id
        }
        await broadcast_request_to_stores(message.bot, broadcast_data)

        resume = (
            f"‚úÖ Demande enregistr√©e :\n"
            f"üöó {data.get('marque')} {data.get('modele')} ({data.get('annee')})\n"
            f"üîß Pi√®ce : {data.get('nom_piece')}\n"
            f"üî¢ Quantit√© : {data.get('quantite')}"
        )
        if data.get("vin"):
            resume += f"\nüîç VIN : {data.get('vin')}"
        if photo_file_id:
            resume += "\nüì∑ Photo jointe."
        
        callback_data_for_button = f"view_offers:{request_id}" # –≠—Ç–æ –∫–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
        await message.answer(resume, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîç Voir les r√©ponses", callback_data=callback_data_for_button)]]), parse_mode="HTML")
        await state.clear()
    else:
        await message.answer("‚ùå Erreur lors de l'enregistrement de votre demande. Veuillez r√©essayer.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
@router.message(PartRequest.waiting_for_photo, F.text == "‚ûñ Passer")
async def skip_photo(message: Message, state: FSMContext):
    await state.update_data(photo=None)
    data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 'nom_piece' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'nom_piece_original'
    if 'nom_piece' not in data:
        data['nom_piece'] = data.get('nom_piece_original', 'Pi√®ce inconnue')
    await send_request_to_server(data, message, state)
@router.callback_query(F.data.startswith("view_offers:"))
async def view_offers(callback_query: CallbackQuery):
    request_id = callback_query.data.split(":")[1]
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
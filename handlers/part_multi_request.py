from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from db.db import save_part_request_with_items, get_store_by_telegram_id
from keyboards.reply import get_cancel_button # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
from keyboards.store import confirm_keyboard # –ò—Å–ø–æ–ª—å–∑—É–µ–º confirm_keyboard –∏–∑ keyboards.store
from services.ai_correction import correct_part_name # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ services.ai_correction

router = Router()

class MultiPartForm(StatesGroup):
    car_description = State()
    part_name = State() # –î–ª—è –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –∑–∞ —Ä–∞–∑
    part_quantity = State() # –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
    confirm_add_more = State() # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    confirm_final = State() # –î–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

@router.message(F.text == "üßæ Demande group√©e") # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "Demande group√©e"
@router.message(Command("multi_request")) # –ò–ª–∏ –∫–æ–º–∞–Ω–¥–∞
async def start_multi_request(message: types.Message, state: FSMContext):
    store = await get_store_by_telegram_id(message.from_user.id)
    if not store or not store["approved"]:
        await message.answer("‚ùå Votre magasin n'est pas encore approuv√© pour faire des demandes.")
        return

    await state.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(items=[], car_description=None) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Å—Ç–µ–π

    await message.answer(
        "üõª D√©crivez le v√©hicule (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥) :",
        reply_markup=get_cancel_button()
    )
    await state.set_state(MultiPartForm.car_description)

@router.message(MultiPartForm.car_description)
async def receive_car(message: types.Message, state: FSMContext):
    await state.update_data(car_description=message.text)
    await message.answer("üîß Nom ou num√©ro de la premi√®re pi√®ce :", reply_markup=get_cancel_button())
    await state.set_state(MultiPartForm.part_name)

@router.message(MultiPartForm.part_name)
async def receive_part_name(message: types.Message, state: FSMContext):
    raw_piece = message.text
    corrected_piece = await correct_part_name(raw_piece) # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é
    await state.update_data(current_part_name=corrected_piece) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
    
    await message.answer(f"üî¢ Quantit√© pour '{corrected_piece}' :", reply_markup=get_cancel_button())
    await state.set_state(MultiPartForm.part_quantity)

@router.message(MultiPartForm.part_quantity)
async def receive_part_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("La quantit√© doit √™tre un nombre positif.")
        
        data = await state.get_data()
        current_part_name = data.get('current_part_name')
        
        items = data.get('items', [])
        items.append({"name": current_part_name, "qty": quantity})
        await state.update_data(items=items)

        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï Ajouter une autre pi√®ce")],
                [KeyboardButton(text="‚úÖ Terminer la demande")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            f"‚úÖ '{current_part_name}' x{quantity} ajout√©. Que souhaitez-vous faire ensuite?",
            reply_markup=kb
        )
        await state.set_state(MultiPartForm.confirm_add_more)

    except ValueError:
        await message.answer("‚ùå Quantit√© invalide. Veuillez entrer un nombre entier positif.")
        await message.answer(f"üî¢ Quantit√© pour '{data.get('current_part_name')}' :") # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@router.message(MultiPartForm.confirm_add_more, F.text == "‚ûï Ajouter une autre pi√®ce")
async def add_another_part(message: types.Message, state: FSMContext):
    await message.answer("üîß Nom ou num√©ro de la pi√®ce suivante :", reply_markup=get_cancel_button())
    await state.set_state(MultiPartForm.part_name)

@router.message(MultiPartForm.confirm_add_more, F.text == "‚úÖ Terminer la demande")
async def confirm_final_multi_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    car = data.get("car_description")
    items = data.get("items")

    if not items:
        await message.answer("‚ö†Ô∏è Vous n'avez ajout√© aucune pi√®ce. Veuillez ajouter au moins une pi√®ce.")
        await message.answer("üîß Nom ou num√©ro de la premi√®re pi√®ce :", reply_markup=get_cancel_button())
        await state.set_state(MultiPartForm.part_name)
        return

    summary = f"üìù Confirmez votre demande group√©e pour le v√©hicule :\n<b>{car}</b>\n\nüì¶ Pi√®ces :\n"
    for item in items:
        summary += f"- {item['name']} x{item['qty']}\n"
    
    await message.answer(
        summary,
        reply_markup=confirm_keyboard(), # –ò—Å–ø–æ–ª—å–∑—É–µ–º confirm_keyboard –∏–∑ keyboards.store
        parse_mode="HTML"
    )
    await state.set_state(MultiPartForm.confirm_final)


@router.message(MultiPartForm.confirm_final, F.text == "‚úÖ Confirmer")
async def send_final_multi_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    
    request_id = await save_part_request_with_items(
        user_id=user_id,
        car_description=data["car_description"],
        items=data["items"]
    )

    if request_id:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É broadcast_request_to_stores –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await message.answer("üì® Votre demande group√©e a √©t√© enregistr√©e et envoy√©e aux magasins concern√©s.", reply_markup 
= ReplyKeyboardRemove())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.answer("‚ùå Une erreur s'est produite lors de l'envoi de votre demande. Veuillez r√©essayer plus tard.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
@router.message(MultiPartForm.confirm_final, F.text == "‚ùå Annuler")
async def cancel_final_multi_request(message: types.Message, state: FSMContext):
    await message.answer("‚ùå Demande annul√©e.", reply_markup=ReplyKeyboardRemove())
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã

import os
from openai import AsyncOpenAI # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ AsyncOpenAI
import aiohttp
import base64
import hashlib
import aiosqlite
from aiogram import Router, F
from aiogram.types import Message
from config.config import OPENAI_API_KEY, DB_FILE # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ config.config

router = Router()

client = AsyncOpenAI(api_key=OPENAI_API_KEY) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AsyncOpenAI

@router.message(F.text == "üì∏ Lire un VIN / num√©ro") # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
async def prompt_photo(message: Message):
    await message.answer("üì∑ Envoyez une photo contenant un num√©ro ou un code VIN.")

@router.message(F.photo)
async def process_vin_photo(message: Message):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ö—ç—à—É –ø—É—Ç–∏
    photo_hash = hashlib.md5(file_path.encode()).hexdigest()
    cached_result = await get_cached_vin(photo_hash)
    if cached_result:
        await message.answer(f"üîç R√©sultat d√©tect√© (from cache):\n<code>{cached_result}</code>", parse_mode="HTML")
        return

    await message.answer("‚è≥ Analyse de l'image en cours...")
    try:
        result = await call_vision_api(file_url)
        await save_cached_vin(photo_hash, result)
        await message.answer(f"üîç R√©sultat d√©tect√©:\n<code>{result}</code>", parse_mode="HTML")
    except Exception as e:
        await message.answer("‚ùå Erreur lors de l‚Äôanalyse de la photo. R√©essayez.")
        print(f"‚ùå Erreur dans vin_ocr: {e}")

async def call_vision_api(image_url: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url) as resp:
            if resp.status != 200:
                raise Exception("Erreur lors du t√©l√©chargement de l‚Äôimage.")
            image_data = await resp.read()

    base64_image = base64.b64encode(image_data).decode("utf-8")
    data_url = f"data:image/jpeg;base64,{base64_image}"

    response = await client.chat.completions.create( # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AsyncOpenAI –∫–ª–∏–µ–Ω—Ç–∞
        model="gpt-4o", # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'gpt-4o' –∏–ª–∏ 'gpt-4-turbo' –¥–ª—è vision
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Lis et extrait uniquement le num√©ro ou code VIN visible sur cette image. Si tu ne vois pas de VIN, indique tout autre num√©ro de s√©rie ou de pi√®ce clairement visible."},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            }
        ],
        max_tokens=100,
    )
    return response.choices[0].message.content.strip()

async def get_cached_vin(photo_hash: str) -> str:
    async with aiosqlite.connect(DB_FILE) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT result FROM vin_cache WHERE photo_hash = ?", (photo_hash,))
        row = await cursor.fetchone()
        return row["result"] if row else None

async def save_cached_vin(photo_hash: str, result: str):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS vin_cache (
                photo_hash TEXT PRIMARY KEY,
                result TEXT,
                cached_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("INSERT OR REPLACE INTO vin_cache (photo_hash, result) VALUES (?, ?)", (photo_hash, result))
        await db.commit()
        
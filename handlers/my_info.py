from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º StateFilter

from db.db import get_store_by_telegram_id, update_store_field # –ò–°–ü–†–ê–í–õ–ï–ù–û: from db.db
from keyboards.reply import get_cancel_button # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
from keyboards.menu import get_main_menu # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

router = Router()

class EditInfoFSM(StatesGroup):
    choosing_field = State()
    new_value = State()

@router.message(F.text == "üìù Mes infos")
async def show_my_info(message: Message, state: FSMContext):
    store = await get_store_by_telegram_id(message.from_user.id)
    if not store:
        await message.answer("‚ùå Vous n'√™tes pas enregistr√© comme magasin.")
        return

    info = (
        f"üè™ <b>Nom:</b> {store['name']}\n"
        f"üìç <b>Adresse:</b> {store['address']}\n"
        f"üèô <b>Ville:</b> {store['city']}\n"
        f"üõí <b>Cat√©gories:</b> {store['categories']}\n"
        f"üìû <b>Contact:</b> {store.get('contact') or 'Non fourni'}"
    )

    await message.answer("Voici les informations de votre magasin :\n\n" + info, parse_mode="HTML")
    await message.answer(
        "Souhaitez-vous modifier quelque chose ? Tapez un des champs suivants :\n"
        "<code>name, address, city, categories, contact</code>\n\n"
        "Ou tapez ‚ùå Annuler pour quitter.", # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        reply_markup=get_cancel_button(), # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        parse_mode="HTML"
    )
    await state.set_state(EditInfoFSM.choosing_field)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå Annuler" –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@router.message(F.text == "‚ùå Annuler", StateFilter(EditInfoFSM.choosing_field))
async def cancel_choosing_field(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("Modification annul√©e.", reply_markup=get_main_menu("store")) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå Annuler" –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(F.text == "‚ùå Annuler", StateFilter(EditInfoFSM.new_value))
async def cancel_new_value(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("Modification annul√©e.", reply_markup=get_main_menu("store")) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞


@router.message(EditInfoFSM.choosing_field)
async def choose_field(message: Message, state: FSMContext):
    field = message.text.strip().lower()
    if field not in {"name", "address", "city", "categories", "contact"}:
        await message.answer("‚ùóÔ∏èChamp invalide. Essayez encore : name, address, city, categories, contact")
        return
    await state.update_data(field=field)
    await message.answer(f"‚úèÔ∏è Entrez la nouvelle valeur –¥–ª—è <b>{field}</b> :", parse_mode="HTML", reply_markup=get_cancel_button()) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    await state.set_state(EditInfoFSM.new_value)

@router.message(EditInfoFSM.new_value)
async def save_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    value = message.text.strip()
    await update_store_field(message.from_user.id, field, value)
    await message.answer(f"‚úÖ Le champ <b>{field}</b> a √©t√© mis √† jour !", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await show_my_info(message, state) # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

from aiogram import Router, types, F
from aiogram.filters import Command
from db.db import save_stock_items # –ò–°–ü–†–ê–í–õ–ï–ù–û: from db.db
import tempfile
import openpyxl
import os

router = Router()

@router.message(Command("uploadstock"))
async def ask_excel_file(message: types.Message):
    await message.answer(
        "üìÑ Veuillez envoyer un fichier Excel (.xlsx) contenant les articles de votre stock.\\n"
        "Le format attendu est : <b>Num√©ro de pi√®ce | Nom | Quantit√© | Prix</b> dans la premi√®re ligne."
    )

@router.message(F.document)
async def handle_stock_file(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    # from utils.role_checker import is_admin
    # if not await is_admin(message.from_user.id):
    #     await message.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits pour cette action.")
    #     return

    if not message.document.file_name.endswith(".xlsx"):
        await message.answer("‚ö†Ô∏è Veuillez envoyer un fichier Excel au format .xlsx.")
        return

    try:
        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
            await message.document.download(destination_file=tmp.name)
            wb = openpyxl.load_workbook(tmp.name)
            ws = wb.active

            stock_items = []
            errors = []
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
                if not row or all(cell is None for cell in row): # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
                try:
                    # –û–∂–∏–¥–∞–µ–º 4 —Å—Ç–æ–ª–±—Ü–∞
                    if len(row) < 4:
                        errors.append(f"Ligne {idx}: Nombre de colonnes insuffisant (attendu 4, trouv√© {len(row)})")
                        continue

                    part_number = row[0]
                    part_name = row[1]
                    quantity = row[2]
                    price = row[3]

                    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤
                    if not all([part_number, part_name]):
                        errors.append(f"Ligne {idx}: Num√©ro de pi√®ce ou nom manquant ({row})")
                        continue
                    
                    if not isinstance(quantity, (int, float)):
                        try:
                            quantity = int(quantity)
                        except (ValueError, TypeError):
                            errors.append(f"Ligne {idx}: Quantit√© invalide, doit √™tre un nombre entier ({row[2]})")
                            continue
                    
                    if not isinstance(price, (int, float)):
                        try:
                            price = float(price)
                        except (ValueError, TypeError):
                            errors.append(f"Ligne {idx}: Prix invalide, doit √™tre un nombre ({row[3]})")
                            continue

                    if quantity < 0 or price < 0:
                        errors.append(f"Ligne {idx}: Quantit√© ou prix n√©gatif ({row})")
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º store_id –∏–∑ user_id Telegram
                    store_id = message.from_user.id # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∫–∞–∫ store_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

                    stock_items.append({
                        "store_id": store_id,
                        "part_number": str(part_number),
                        "part_name": str(part_name),
                        "quantity": int(quantity),
                        "price": float(price)
                    })
                except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏
                    errors.append(f"Ligne {idx}: Erreur de traitement ({row}) - {str(e)}")
                    continue

            if errors:
                error_message_text = "‚ö†Ô∏è Erreurs dans le fichier:\\n" + "\\n".join(errors[:10]) # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                if len(errors) > 10:
                    error_message_text += "\\n... et plus d'erreurs. (Voir les logs pour plus de d√©tails)"
                await message.answer(error_message_text)
                
                if stock_items:
                    await message.answer(f"‚ÑπÔ∏è {len(stock_items)} articles valides seront enregistr√©s.")
                else:
                    return # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º

            if stock_items:
                await save_stock_items(stock_items)
                await message.answer(f"‚úÖ {len(stock_items)} articles ont √©t√© ajout√©s au stock.")
            else:
                await message.answer("‚ùå Aucun article valide n'a √©t√© trouv√© dans le fichier pour l'enregistrement.")


    except Exception as e:
        await message.answer(f"‚ùå Erreur lors du traitement du fichier: {str(e)}")
        print(f"‚ùå Erreur dans stock_upload: {e}") # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if 'tmp' in locals() and os.path.exists(tmp.name):
                os.remove(tmp.name)
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression du fichier temporaire: {e}")

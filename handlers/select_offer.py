from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db.db import get_requests_by_store, get_offers_by_request_id, mark_offer_as_chosen # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: mark_offer_as_chosen –∏–∑ db

router = Router()

@router.message(F.text == "‚úâÔ∏è Choisir une offre") # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
async def show_offers_menu(message: Message):
    requests = await get_requests_by_store(message.from_user.id) # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —ç—Ç–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º
    if not requests:
        await message.answer("üõã Vous n‚Äôavez pas encore fait de demandes.")
        return

    found_offers = False
    for req in requests:
        offers = await get_offers_by_request_id(req["id"]) # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ —ç—Ç–∏—Ö –∑–∞—è–≤–æ–∫
        if not offers:
            continue

        found_offers = True
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å
        active_offers = [offer for offer in offers if not offer.get('selected')]
        
        if not active_offers:
            await message.answer(
                f"üîç Aucune nouvelle offre pour: <b>{req['part_name']}</b> ({req['car']}).",
                parse_mode="HTML"
            )
            continue


        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"‚úÖ {offer.get('price', 'N/A')} ‚Ç¨ ({offer.get('delivery', 'N/A')})",
                        callback_data=f"choose_offer:{offer['id']}"
                    )
                ] for offer in active_offers
            ]
        )

        await message.answer(
            f"üîç <b>Offres pour:</b> {req['part_name']} ({req['car']})",
            reply_markup=kb,
            parse_mode="HTML"
        )
    
    if not found_offers:
        await message.answer("üõã Aucune nouvelle offre trouv√©e pour vos demandes.")


@router.callback_query(F.data.startswith("choose_offer:"))
async def choose_offer_callback(call: CallbackQuery):
    offer_id = int(call.data.split(":")[1])
    
    selected_offer_data = await mark_offer_as_chosen(offer_id) # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    
    if not selected_offer_data:
        await call.answer("‚ùå Erreur lors de la s√©lection de l'offre.", show_alert=True)
        return

    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(f"‚úÖ Offre s√©lectionn√©e. Vous pouvez contacter le vendeur.")
    await call.answer("Offre enregistr√©e avec succ√®s.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
    responder_id = selected_offer_data['responder_id']
    responder_username = selected_offer_data['responder_username']
    request_id = selected_offer_data['request_id']
    offer_text = selected_offer_data['offer_text']

    try:
        await call.bot.send_message(
            chat_id=responder_id,
            text=f"üéâ Votre offre pour la demande #{request_id} a √©t√© s√©lectionn√©e !\n\n"
                 f"Votre offre: <code>{offer_text}</code>\n"
                 f"Pour contacter le demandeur: @{call.from_user.username or call.from_user.full_name}",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"‚ùå Erreur en envoyant la notification au vendeur {responder_id}: {e}")
        await call.message.answer(f"‚ö†Ô∏è Impossible d'envoyer une notification au vendeur ({responder_username}).")
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await delete_offers_by_request_id(request_id)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    await call.message.answer("Toutes les autres offres pour cette demande ont √©t√© supprim√©es.")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —á—Ç–æ –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
    for offer in selected_offer_data['other_offers']:
        if offer['id'] != offer_id:
            try:
                await call.bot.send_message(
                    chat_id=offer['responder_id'],
                    text=f"‚ùå Votre offre pour la demande #{request_id} a √©t√© rejet√©e.\n"
                         f"Pour contacter le demandeur: @{call.from_user.username or call.from_user.full_name}",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"‚ùå Erreur en envoyant la notification au vendeur {offer['responder_id']}: {e}")
                await call.message.answer(f"‚ö†Ô∏è Impossible d'envoyer une notification au vendeur ({offer['responder_username']}).")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞, —á—Ç–æ –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
    await call.message.answer("‚ùå Votre offre a √©t√© rejet√©e.")
    await call.answer() # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫—Ä—É—Ç—è—â–∏–π—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏  
@router.callback_query(F.data == "cancel_choose_offer")
async def cancel_choose_offer_callback(call: CallbackQuery):
    await call.message.edit_text("S√©lection d'offre annul√©e.", reply_markup=None)
    await call.answer() # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫—Ä—É—Ç—è—â–∏–π—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
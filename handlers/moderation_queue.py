from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from db.db import get_pending_stores, approve_store, reject_store, get_store_by_telegram_id # –ò–°–ü–†–ê–í–õ–ï–ù–û: from db.db
from config.config import TELEGRAM_MOD_GROUP_ID as MOD_GROUP_ID, TELEGRAM_ADMIN_GROUP_ID as ADMIN_GROUP_ID # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑ config.config
from utils.role_checker import is_admin # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑ utils.role_checker

router = Router()

@router.message(Command("mod√©rer"))
@router.message(F.text == "üßæ √Ä mod√©rer") # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ
async def show_pending_stores(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not (await is_admin(message.from_user.id) or message.chat.id == MOD_GROUP_ID):
        await message.answer("‚õîÔ∏è Vous n‚Äôavez pas acc√®s √† la file de mod√©ration.")
        return

    await state.clear()
    pending_stores = await get_pending_stores()
    if not pending_stores:
        await message.answer("‚úÖ Aucun magasin en attente.")
        return

    for store in pending_stores:
        text = (
            f"üßæ <b>Demande de validation</b>\n"
            f"üë§ <b>@{store['username'] or '‚Äî'}</b> (ID: <code>{store['telegram_id']}</code>)\n"
            f"üè™ <b>Magasin:</b> {store['name']}\n"
            f"üìç <b>Adresse:</b> {store['address']} ‚Äî {store['city']}\n"
            f"üì¶ <b>Cat√©gories:</b> {store['categories']}\n"
            f"üìû <b>Contact:</b> {store['contact'] or '‚Äî'}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ Approuver", callback_data=f"mod:approve:{store['telegram_id']}"),
                InlineKeyboardButton(text="‚ùå Rejeter", callback_data=f"mod:reject:{store['telegram_id']}")
            ]
        ])
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@router.callback_query(F.data.startswith("mod:approve:"))
async def approve_callback(call: CallbackQuery):
    if not (await is_admin(call.from_user.id) or call.message.chat.id == MOD_GROUP_ID):
        await call.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.", show_alert=True)
        return

    telegram_id = int(call.data.split(":")[2])
    store = await get_store_by_telegram_id(telegram_id)
    if not store:
        await call.answer("‚ùå D√©j√† trait√© ou introuvable.", show_alert=True)
        return

    if store.get("approved"): # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω
        await call.answer("‚úÖ Ce magasin est d√©j√† approuv√©.", show_alert=True)
        return

    await approve_store(telegram_id, True)
    await call.message.edit_text( # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –≤–∏—Å–µ–ª–æ
        f"‚úÖ Magasin approuv√©: @{store['username'] or '‚Äî'} (ID: {telegram_id})",
        parse_mode=ParseMode.HTML,
        reply_markup=None # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    )

    admin_text = ( # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã
        f"‚úÖ <b>Magasin approuv√©</b>\n"
        f"üë§ <b>@{store['username'] or '‚Äî'}</b> (ID: <code>{telegram_id}</code>)\n"
        f"üè™ <b>Nom:</b> {store['name']}\n"
        f"üìç <b>Adresse:</b> {store['address']} ‚Äî {store['city']}\n"
        f"üõí <b>Cat√©gories:</b> {store['categories']}\n"
        f"üìû <b>Contact:</b> {store['contact'] or '‚Äî'}"
    )
    if ADMIN_GROUP_ID != 0: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        await call.bot.send_message(chat_id=ADMIN_GROUP_ID, text=admin_text, parse_mode=ParseMode.HTML)


    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.bot.send_message(
            chat_id=telegram_id,
            text="‚úÖ <b>F√©licitations !</b> Votre magasin a √©t√© approuv√© üéâ\nVous pouvez maintenant utiliser toutes les fonctionnalit√©s du bot.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible d‚Äôenvoyer le message d‚Äôapprobation √† l‚Äôutilisateur {telegram_id}: {e}")
        if ADMIN_GROUP_ID != 0:
            await call.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"‚ö†Ô∏è Impossible d‚Äôenvoyer le message d‚Äôapprobation √† l‚Äôutilisateur <code>{telegram_id}</code>.",
                parse_mode=ParseMode.HTML
            )

    await call.answer("‚úÖ Approuv√©.")


@router.callback_query(F.data.startswith("mod:reject:"))
async def reject_callback(call: CallbackQuery):
    if not (await is_admin(call.from_user.id) or call.message.chat.id == MOD_GROUP_ID):
        await call.answer("‚õîÔ∏è Vous n‚Äôavez pas les droits.", show_alert=True)
        return

    telegram_id = int(call.data.split(":")[2])
    store = await get_store_by_telegram_id(telegram_id)
    if not store:
        await call.answer("‚ùå D√©j√† trait√© ou introuvable.", show_alert=True)
        return

    if store.get("approved"): # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω
        await call.answer("‚ö†Ô∏è Magasin d√©j√† approuv√© ‚Äî rejet impossible.", show_alert=True)
        return

    await reject_store(telegram_id) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞–≥–∞–∑–∏–Ω–∞
    await call.message.edit_text( # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        f"‚ùå Magasin rejet√©: @{store['username'] or '‚Äî'} (ID: {telegram_id})",
        parse_mode=ParseMode.HTML,
        reply_markup=None # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    )

    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.bot.send_message(
            chat_id=telegram_id,
            text="‚ùå <b>D√©sol√©</b>, votre demande a √©t√© rejet√©e. Vous pouvez r√©essayer plus tard.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible d‚Äôenvoyer le message de rejet √† l‚Äôutilisateur {telegram_id}: {e}")
        if ADMIN_GROUP_ID != 0:
            await call.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"‚ö†Ô∏è Impossible d‚Äôenvoyer le rejet √† l‚Äôutilisateur <code>{telegram_id}</code>.",
                parse_mode=ParseMode.HTML
            )

    await call.answer("‚ùå Rejet√©.")

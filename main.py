import os
import logging
from aiohttp import web
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import setup_application
import openai

# üîß –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

PORT = int(os.getenv("PORT", 8080))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN or not WEBHOOK_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ WEBHOOK_URL!")

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
openai.api_key = OPENAI_API_KEY

# üü¢ –•–µ–Ω–¥–ª–µ—Ä: /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Google Cloud Run.")

# ü§ñ AI-–∫–æ–º–∞–Ω–¥–∞: ai: —Ç–≤–æ–π —Ç–µ–∫—Å—Ç
@dp.message(lambda message: message.text.lower().startswith("ai:"))
async def ai_handler(message: types.Message):
    prompt = message.text[3:].strip()
    if not prompt:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ 'ai:'")
        return
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ AI:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.")

# üîÅ Echo –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.message()
async def echo(message: types.Message):
    logging.info(f"üì© –û—Ç {message.from_user.id}: {message.text}")
    await message.answer(message.text)

# üß™ Healthcheck –¥–ª—è Render/GCP
async def health_check(request):
    return web.Response(text="‚úÖ OK")

# üîÅ Webhook —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
async def on_startup(app):
    await bot.set_webhook(f"{WEBHOOK_URL}{WEBHOOK_PATH}")
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}{WEBHOOK_PATH}")

async def on_shutdown(app):
    await bot.session.close()

# üöÄ –ó–∞–ø—É—Å–∫ aiohttp
def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    setup_application(app, dp, bot=bot, path=WEBHOOK_PATH)
    app.router.add_get("/healthz", health_check)
    app["bot"] = bot
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
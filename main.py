import os
import logging
import sys

# Add parent directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from aiohttp import web
from aiogram.webhook.aiohttp_server import setup_application

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–º–µ–Ω–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è db.init_db
from config.config import TELEGRAM_BOT_TOKEN, WEBHOOK_URL, ENV, DB_FILE
from db.db import init_db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Ä—è–¥–æ–∫ –∑–¥–µ—Å—å –≤–∞–∂–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
# –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ –æ–±—â–∏—Ö.

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
from handlers.store_registration import router as store_registration_router
from handlers.part_request import router as part_request_router
from handlers.part_multi_request import router as part_multi_request_router
from handlers.my_info import router as my_info_router
from handlers.my_requests import router as my_requests_router
from handlers.responses_handler import router as responses_handler_router
from handlers.select_offer import router as select_offer_router
from handlers.store_info import router as store_info_router
from handlers.stock_upload import router as stock_upload_router # –î–æ–±–∞–≤–ª–µ–Ω–æ
from handlers.vin_ocr import router as vin_ocr_router
from handlers.contact import router as contact_router # –î–æ–±–∞–≤–ª–µ–Ω–æ
from handlers.help import router as help_router # –î–æ–±–∞–≤–ª–µ–Ω–æ

dp.include_router(store_registration_router)
dp.include_router(part_request_router)
dp.include_router(part_multi_request_router)
dp.include_router(my_info_router)
dp.include_router(my_requests_router)
dp.include_router(responses_handler_router)
dp.include_router(select_offer_router)
dp.include_router(store_info_router)
dp.include_router(stock_upload_router) # –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
dp.include_router(vin_ocr_router)
dp.include_router(contact_router) # –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
dp.include_router(help_router) # –ü–æ–¥–∫–ª—é—á–µ–Ω–æ

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ---
from handlers.admin.admin_dashboard import router as admin_dashboard_router
from handlers.admin.admin_users import router as admin_users_router
from handlers.admin.admin_subscriptions import router as admin_subscriptions_router
from handlers.admin.admin_ads import router as admin_ads_router
from handlers.admin.admin_clients import router as admin_clients_router
from handlers.admin.admin_tools import router as admin_tools_router
from handlers.admin.settings import router as admin_settings_router
from handlers.moderation_queue import router as moderation_queue_router
from handlers.statistics import router as statistics_router

dp.include_router(admin_dashboard_router)
dp.include_router(admin_users_router)
dp.include_router(admin_subscriptions_router)
dp.include_router(admin_ads_router)
dp.include_router(admin_clients_router)
dp.include_router(admin_tools_router)
dp.include_router(admin_settings_router)
dp.include_router(moderation_queue_router)
dp.include_router(statistics_router)

# --- –û–±—â–µ–µ –º–µ–Ω—é (–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ) ---
from handlers.menu import router as menu_router
dp.include_router(menu_router)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dispatcher):
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    await init_db()
    logger.info("–ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    if ENV == "cloud":
        if not WEBHOOK_URL:
            logger.error("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Cloud Run!")
            raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Cloud Run!")
        webhook_url_full = f"{WEBHOOK_URL}/webhook"
        logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook: {webhook_url_full}")
        await bot.set_webhook(webhook_url_full)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Polling...")


async def main_loop():
    if ENV == "local":
        await on_startup(dp)
        await dp.start_polling(bot)
    elif ENV == "cloud":
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook (Cloud Run)...")
        app = web.Application()
        app["bot"] = bot
        app["dp"] = dp
        setup_application(app, dp, bot=bot, path="/webhook")
        app.on_startup.append(on_startup)
        
        async def health_check(request):
            return web.Response(text="Bot is running!")
        app.router.add_get("/", health_check)

        port = int(os.getenv("PORT", 8080))
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{port}")
        while True:
            await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main_loop())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)